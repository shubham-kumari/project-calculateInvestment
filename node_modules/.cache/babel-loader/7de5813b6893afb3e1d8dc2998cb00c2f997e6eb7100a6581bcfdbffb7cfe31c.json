{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamkumari/Downloads/01-starting-project 3/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Form from './components/Form';\nimport Header from './components/header';\nimport Result from './components/Result';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentSaving: 10000,\n  yearlyContribution: 1200,\n  expectedReturn: 7,\n  duration: 10\n};\nfunction App() {\n  _s();\n  const [inputValue, setInputValue] = useState(initialState);\n  function handleInputChange(inputId, eventValue) {\n    setInputValue(prevInputValue => {\n      console.log(prevInputValue);\n      return {\n        ...prevInputValue,\n        [inputId]: +eventValue\n      };\n    });\n  }\n  function resetHandler() {\n    setInputValue(initialState);\n  }\n  const calculateHandler = inputValue => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +inputValue['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +inputValue['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +inputValue['expected-return'] / 100;\n    const duration = +inputValue['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onChange: handleInputChange,\n      inputValue: inputValue,\n      handleReset: resetHandler,\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Result, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"QYd3dd616aUR+1x5AiUqx+0Ks7w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Form","Header","Result","jsxDEV","_jsxDEV","Fragment","_Fragment","initialState","currentSaving","yearlyContribution","expectedReturn","duration","App","_s","inputValue","setInputValue","handleInputChange","inputId","eventValue","prevInputValue","console","log","resetHandler","calculateHandler","yearlyData","currentSavings","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","handleReset","onCalculate","_c","$RefreshReg$"],"sources":["/Users/shubhamkumari/Downloads/01-starting-project 3/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport Form from './components/Form';\nimport Header from './components/header';\nimport Result from './components/Result';\n\nconst initialState = {\n  currentSaving: 10000,\n  yearlyContribution: 1200,\n  expectedReturn: 7,\n  duration: 10,\n};\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(initialState);\n\n  function handleInputChange(inputId, eventValue) {\n    setInputValue((prevInputValue) => {\n        console.log(prevInputValue);\n        \n      return {\n        ...prevInputValue,\n      [inputId]: +eventValue, \n      }\n    });\n  }\n\n  \n\n  function resetHandler() {\n    setInputValue(initialState);\n  }\n  const calculateHandler = (inputValue) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +inputValue['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +inputValue['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +inputValue['expected-return'] / 100;\n    const duration = +inputValue['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n\n  return (\n    <>\n      <Header/>\n\n      <Form onChange={handleInputChange} inputValue={inputValue} handleReset={resetHandler} onCalculate={calculateHandler}/>\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      <Result/>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzC,MAAMC,YAAY,GAAG;EACnBC,aAAa,EAAE,KAAK;EACpBC,kBAAkB,EAAE,IAAI;EACxBC,cAAc,EAAE,CAAC;EACjBC,QAAQ,EAAE;AACZ,CAAC;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAACQ,YAAY,CAAC;EAE1D,SAASS,iBAAiBA,CAACC,OAAO,EAAEC,UAAU,EAAE;IAC9CH,aAAa,CAAEI,cAAc,IAAK;MAC9BC,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;MAE7B,OAAO;QACL,GAAGA,cAAc;QACnB,CAACF,OAAO,GAAG,CAACC;MACZ,CAAC;IACH,CAAC,CAAC;EACJ;EAIA,SAASI,YAAYA,CAAA,EAAG;IACtBP,aAAa,CAACR,YAAY,CAAC;EAC7B;EACA,MAAMgB,gBAAgB,GAAIT,UAAU,IAAK;IACvC;IACA;;IAEA,MAAMU,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACX,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACrD,MAAML,kBAAkB,GAAG,CAACK,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC/D,MAAMJ,cAAc,GAAG,CAACI,UAAU,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC3D,MAAMH,QAAQ,GAAG,CAACG,UAAU,CAAC,UAAU,CAAC;;IAExC;IACA,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,QAAQ,EAAEe,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGF,cAAc,GAAGf,cAAc;MACtDe,cAAc,IAAIE,cAAc,GAAGlB,kBAAkB;MACrDe,UAAU,CAACI,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEL,cAAc;QAChChB,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;EAGD,oBACEL,OAAA,CAAAE,SAAA;IAAAyB,QAAA,gBACE3B,OAAA,CAACH,MAAM;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAET/B,OAAA,CAACJ,IAAI;MAACoC,QAAQ,EAAEpB,iBAAkB;MAACF,UAAU,EAAEA,UAAW;MAACuB,WAAW,EAAEf,YAAa;MAACgB,WAAW,EAAEf;IAAiB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAKtH/B,OAAA,CAACF,MAAM;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eACT,CAAC;AAEP;AAACtB,EAAA,CA3DQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}